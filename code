#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
void mazeGen(char maze[21][21], char traversed[21][21]);
void recur(char maze[21][21], char traversed[21][21], int xpos, int
ypos);
int main()
{
 clock_t t=clock();
 //Stores the maze
 char maze[21][21] = {

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#','O','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
{'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#','#','#',' ','#'},


{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#'},

{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}};
 
 char traversed[21][21] =
 {{'#','#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#','#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#'},
 {'#','O' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
 {'#','t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t','#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#' ,'t' ,'#'},
 {'#','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t','t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'t' ,'#'},
{'#','#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#','#' ,'#' ,'#' ,'#' ,'#' ,'#' ,'#'}};

mazeGen(maze, traversed);
 t=clock()-t;
 double tt=((double)t)/CLOCKS_PER_SEC;
 printf(" \n time taken is: %f sec ",tt);
}

 void mazeGen(char maze[21][21], char traversed[21][21])
 {
 srand(time(NULL));
 int xpos = 1;
 int ypos = 1;
 maze[xpos][ypos] = 'O';
 recur(maze, traversed, xpos, ypos);
 maze[19][19] = 'X';
 for(int n = 0; n<21; n++)
 {
 for(int k = 0; k<21; k++)
 {
 printf("%c", maze[n][k]);
 }
 printf("%c", '\n');

}
 }
 void recur(char maze[21][21], char traversed[21][21], int xpos,
int ypos)
 {
int randomnumber = rand()%4;
 //This loop runs while there are any empty spaces surrounding

 while(traversed[xpos-1][ypos-1] == 't' ||
traversed[xpos][ypos-1] == 't' ||
 traversed[xpos+1][ypos-1] == 't' || traversed[xpos-1][ypos]
== 't' || traversed[xpos][ypos] == 't' ||
 traversed[xpos+1][ypos] == 't' || traversed[xpos-1][ypos+1]
== 't' || traversed[xpos][ypos+1] == 't' ||
traversed[xpos+1][ypos+1] == 't' ){
  randomnumber = rand()%4;
 if(randomnumber == 0)
 {
 if((xpos >1) && (traversed[xpos-2][ypos] == 't' ))
 {
 xpos--;
 //Tear down said wall and mark as visited
 maze[xpos][ypos] = ' ';

//Calls the recursion function for the next cell
 traversed[xpos][ypos]= ' ';
 //Set coordinates to interior of next cell
xpos--;

 traversed[xpos][ypos]= ' ';
 //Calls this function(recursion) for the next cell
 recur(maze,traversed, xpos, ypos);
 xpos+=2;
 }
 else if(traversed[xpos-2][ypos] != 't' )
 {
 traversed[xpos-1][ypos] = '#';
 }
 }
 else if(randomnumber == 1)
 {
 if((xpos <19) && (traversed[xpos+2][ypos] == 't' ))
 {
 xpos++;

maze[xpos][ypos] = ' ';
traversed [xpos][ypos]= ' ';
 //Set coordinates to interior of next cell
 xpos++;
 traversed[xpos][ypos]= ' ';
 //Calls this function(recursion) for the next cell
 recur(maze,traversed, xpos, ypos);
 xpos-=2;
 }
 else if(traversed[xpos+2][ypos] != 't' )
 {
 traversed[xpos+1][ypos] = '#';
 }
 }
 else if(randomnumber == 2)
 {
 if((ypos >1) && (traversed[xpos][ypos-2] == 't' ))
 {
 ypos--;
 maze[xpos][ypos] = ' ';
 traversed[xpos][ypos]= ' ';
 ypos--;

traversed[xpos][ypos]= ' ';
 //Calls this function(recursion) for the next cell
 recur(maze,traversed, xpos, ypos);
 ypos+=2;
 }
 else if(traversed[xpos][ypos-2] != 't' )
 {
 traversed[xpos][ypos-1] = '#';
 }
 }
 else
 {
 if((ypos <19) && (traversed[xpos][ypos+2] == 't' ))
 {
 ypos++;
 maze[xpos][ypos] = ' ';
 traversed[xpos][ypos]= ' ';
 ypos++;
 traversed[xpos][ypos]= ' ';
 //Calls this function(recursion) for the next cell

 recur(maze,traversed, xpos, ypos);
 ypos-=2;
}
 else if(traversed[xpos][ypos+2] != 't' )
 {
 traversed[xpos][ypos+1] = '#';
 }
 }
 }

}
